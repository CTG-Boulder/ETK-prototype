use std::time::{SystemTime, UNIX_EPOCH};
use gmp::{rand::RandState, mpz::Mpz};

fn main() {
  let q = Mpz::from_str_radix("178171220140272798266866931234182711587930362620029150284400461115532452608037840822207755959815400386995552513197923416018750499205163320936498974491194711240466110744775433547666080531359371170886645011032011430886772038856350858746472169074806457686631687570723108643679182783843207830628037486310057319283", 10).unwrap();
  let p = Mpz::from_str_radix("356342440280545596533733862468365423175860725240058300568800922231064905216075681644415511919630800773991105026395846832037500998410326641872997948982389422480932221489550867095332161062718742341773290022064022861773544077712701717492944338149612915373263375141446217287358365567686415661256074972620114638567", 10).unwrap();

  let mut rng = RandState::new();
  let seed = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos() as u64;
  rng.seed_ui(seed);

  let two = Mpz::one() + Mpz::one();
  let a = rng.urandom_2exp(1024) * two.clone() + 1;

  dbg!(a < q);

  let key = Mpz::from_str_radix("f63f758a", 16).unwrap();

  let enc_a = key.powm_sec(&a, &p);
  let u = p.clone() - 1;
  let dec_a = enc_a.powm_sec(&a.invert(&u).unwrap(), &p);
  dbg!(key);
  dbg!(enc_a);
  dbg!(dec_a);
}
